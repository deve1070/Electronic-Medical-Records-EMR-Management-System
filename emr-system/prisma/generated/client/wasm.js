
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  user_id: 'user_id',
  username: 'username',
  password_hash: 'password_hash',
  full_name: 'full_name',
  role: 'role',
  is_active: 'is_active',
  last_login: 'last_login',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PatientsScalarFieldEnum = {
  patient_id: 'patient_id',
  full_name: 'full_name',
  date_of_birth: 'date_of_birth',
  gender: 'gender',
  phone_number: 'phone_number',
  address: 'address',
  allergies: 'allergies',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DoctorsScalarFieldEnum = {
  doctor_id: 'doctor_id',
  user_id: 'user_id',
  specialty: 'specialty',
  license_number: 'license_number',
  is_available: 'is_available',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MedicalHistoryScalarFieldEnum = {
  history_id: 'history_id',
  patient_id: 'patient_id',
  technician_id: 'technician_id',
  record_date: 'record_date',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LabOrdersScalarFieldEnum = {
  order_id: 'order_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  ordered_by: 'ordered_by',
  test_type: 'test_type',
  status: 'status',
  priority: 'priority',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LabResultsScalarFieldEnum = {
  result_id: 'result_id',
  order_id: 'order_id',
  patient_id: 'patient_id',
  technician_id: 'technician_id',
  result_data: 'result_data',
  status: 'status',
  is_positive: 'is_positive',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DiseasesScalarFieldEnum = {
  disease_id: 'disease_id',
  disease_name: 'disease_name',
  description: 'description',
  icd_code: 'icd_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.DiagnosesScalarFieldEnum = {
  diagnosis_id: 'diagnosis_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  disease_id: 'disease_id',
  condition: 'condition',
  notes: 'notes',
  severity: 'severity',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CasesScalarFieldEnum = {
  case_id: 'case_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  status: 'status',
  priority: 'priority',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PrescriptionsScalarFieldEnum = {
  prescription_id: 'prescription_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  prescribed_by: 'prescribed_by',
  medication: 'medication',
  dosage: 'dosage',
  instructions: 'instructions',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AccessLogsScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  patient_id: 'patient_id',
  action: 'action',
  resource: 'resource',
  details: 'details',
  timestamp: 'timestamp',
  ip_address: 'ip_address'
};

exports.Prisma.SystemLogsScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp',
  ip_address: 'ip_address'
};

exports.Prisma.UserSessionsScalarFieldEnum = {
  session_id: 'session_id',
  user_id: 'user_id',
  token: 'token',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.RecoveryRecordsScalarFieldEnum = {
  record_id: 'record_id',
  patient_id: 'patient_id',
  doctor_id: 'doctor_id',
  disease_id: 'disease_id',
  diagnosis_date: 'diagnosis_date',
  recovery_date: 'recovery_date',
  notes: 'notes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  Users: 'Users',
  Patients: 'Patients',
  Doctors: 'Doctors',
  MedicalHistory: 'MedicalHistory',
  LabOrders: 'LabOrders',
  LabResults: 'LabResults',
  Diseases: 'Diseases',
  Diagnoses: 'Diagnoses',
  Cases: 'Cases',
  Prescriptions: 'Prescriptions',
  AccessLogs: 'AccessLogs',
  SystemLogs: 'SystemLogs',
  UserSessions: 'UserSessions',
  RecoveryRecords: 'RecoveryRecords'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
