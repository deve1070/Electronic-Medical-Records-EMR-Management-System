generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./emr.db"
}

model Users {
  user_id        Int              @id @default(autoincrement())
  username       String           @unique
  password_hash  String
  full_name      String
  role           String // "ADMIN", "DOCTOR", "TECHNICIAN", "PHARMACIST", "RECORD_OFFICER", "NURSE"
  doctor         Doctors?
  is_active      Boolean          @default(true)
  last_login     DateTime?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  LabOrders      LabOrders[]      @relation("OrderedBy")
  MedicalHistory MedicalHistory[] @relation("Technician")
  LabResults     LabResults[]     @relation("Technician")
  AccessLogs     AccessLogs[]     @relation("User")
  Prescriptions  Prescriptions[]  @relation("PrescribedBy")
  SystemLogs     SystemLogs[]     @relation("PerformedBy")
  UserSessions   UserSessions[]
}

model Patients {
  patient_id      Int               @id @default(autoincrement())
  full_name       String
  date_of_birth   DateTime
  gender          String
  phone_number    String            @unique
  address         String
  allergies       String?
  is_active       Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  MedicalHistory  MedicalHistory[]
  LabOrders       LabOrders[]
  LabResults      LabResults[]
  Diagnoses       Diagnoses[]
  Cases           Cases[]
  AccessLogs      AccessLogs[]      @relation("Patient")
  Prescriptions   Prescriptions[]
  RecoveryRecords RecoveryRecords[]
}

model Doctors {
  doctor_id       Int               @id @default(autoincrement())
  user_id         Int               @unique
  user            Users             @relation(fields: [user_id], references: [user_id])
  specialty       String
  license_number  String            @unique
  is_available    Boolean           @default(true)
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Diagnoses       Diagnoses[]
  Cases           Cases[]
  LabOrders       LabOrders[]
  RecoveryRecords RecoveryRecords[]
}

model MedicalHistory {
  history_id    Int      @id @default(autoincrement())
  patient_id    Int
  patient       Patients @relation(fields: [patient_id], references: [patient_id])
  technician_id Int
  technician    Users    @relation("Technician", fields: [technician_id], references: [user_id])
  record_date   DateTime @default(now())
  notes         String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model LabOrders {
  order_id        Int          @id @default(autoincrement())
  patient_id      Int
  patient         Patients     @relation(fields: [patient_id], references: [patient_id])
  doctor_id       Int
  doctor          Doctors      @relation(fields: [doctor_id], references: [doctor_id])
  ordered_by      Int
  ordered_by_user Users        @relation("OrderedBy", fields: [ordered_by], references: [user_id])
  test_type       String
  status          String // "PENDING", "IN_PROGRESS", "COMPLETED"
  priority        String // "NORMAL", "URGENT", "EMERGENCY"
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  LabResults      LabResults[]
}

model LabResults {
  result_id     Int       @id @default(autoincrement())
  order_id      Int
  order         LabOrders @relation(fields: [order_id], references: [order_id])
  patient_id    Int
  patient       Patients  @relation(fields: [patient_id], references: [patient_id])
  technician_id Int
  technician    Users     @relation("Technician", fields: [technician_id], references: [user_id])
  result_data   String
  status        String // "PENDING", "COMPLETED"
  is_positive   Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
}

model Diseases {
  disease_id      Int               @id @default(autoincrement())
  disease_name    String            @unique
  description     String?
  icd_code        String?           @unique
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  Diagnoses       Diagnoses[]
  RecoveryRecords RecoveryRecords[]
}

model Diagnoses {
  diagnosis_id Int      @id @default(autoincrement())
  patient_id   Int
  patient      Patients @relation(fields: [patient_id], references: [patient_id])
  doctor_id    Int
  doctor       Doctors  @relation(fields: [doctor_id], references: [doctor_id])
  disease_id   Int
  disease      Diseases @relation(fields: [disease_id], references: [disease_id])
  condition    String
  notes        String
  severity     String // "MILD", "MODERATE", "SEVERE"
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Cases {
  case_id    Int      @id @default(autoincrement())
  patient_id Int
  patient    Patients @relation(fields: [patient_id], references: [patient_id])
  doctor_id  Int
  doctor     Doctors  @relation(fields: [doctor_id], references: [doctor_id])
  status     String // "ACTIVE", "CLOSED"
  priority   String // "NORMAL", "URGENT", "EMERGENCY"
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Prescriptions {
  prescription_id    Int      @id @default(autoincrement())
  patient_id         Int
  patient            Patients @relation(fields: [patient_id], references: [patient_id])
  doctor_id          Int
  prescribed_by      Int
  prescribed_by_user Users    @relation("PrescribedBy", fields: [prescribed_by], references: [user_id])
  medication         String
  dosage             String
  instructions       String
  status             String // "PENDING", "FILLED", "DISPENSED"
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model AccessLogs {
  log_id     Int      @id @default(autoincrement())
  user_id    Int
  user       Users    @relation("User", fields: [user_id], references: [user_id])
  patient_id Int
  patient    Patients @relation("Patient", fields: [patient_id], references: [patient_id])
  action     String // "VIEW", "CREATE", "UPDATE", "DELETE"
  resource   String // "PATIENT", "MEDICAL_HISTORY", "LAB_RESULT", etc.
  details    String?
  timestamp  DateTime @default(now())
  ip_address String?
}

model SystemLogs {
  log_id     Int      @id @default(autoincrement())
  user_id    Int
  user       Users    @relation("PerformedBy", fields: [user_id], references: [user_id])
  action     String // "LOGIN", "LOGOUT", "SYSTEM_CONFIG", "USER_MANAGEMENT", etc.
  details    String?
  timestamp  DateTime @default(now())
  ip_address String?
}

model UserSessions {
  session_id Int      @id @default(autoincrement())
  user_id    Int
  user       Users    @relation(fields: [user_id], references: [user_id])
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model RecoveryRecords {
  record_id      Int      @id @default(autoincrement())
  patient_id     Int
  patient        Patients @relation(fields: [patient_id], references: [patient_id])
  doctor_id      Int
  doctor         Doctors  @relation(fields: [doctor_id], references: [doctor_id])
  disease_id     Int
  disease        Diseases @relation(fields: [disease_id], references: [disease_id])
  diagnosis_date DateTime
  recovery_date  DateTime
  notes          String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}
